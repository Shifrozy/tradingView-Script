//@version=5
indicator("Divergence Breakout Pro â€“ Clean Signals", overlay=true, max_lines_count=200, max_labels_count=200)

// Inputs
osc_type = input.string("MACD","Oscillator",options=["MACD","RSI"])
pivotL   = input.int(5,"Pivot Left Bars",minval=1)
pivotR   = input.int(5,"Pivot Right Bars",minval=1)
stopPct  = input.float(0.5,"Stop offset %",minval=0.0)

// Oscillator
fastLen=12, slowLen=26, sigLen=9
macd=ta.ema(close,fastLen)-ta.ema(close,slowLen)
macd_sig=ta.ema(macd,sigLen)
macd_hist=macd-macd_sig
rsi=ta.rsi(close,14)
osc=osc_type=="MACD"?macd_hist:rsi

// Pivots
pHigh=ta.pivothigh(high,pivotL,pivotR)
pLow=ta.pivotlow(low,pivotL,pivotR)
oHigh=ta.pivothigh(osc,pivotL,pivotR)
oLow=ta.pivotlow(osc,pivotL,pivotR)

// Store divergence lines
var line bullLine=na
var line bearLine=na

// Divergence detection
bullDiv=not na(pLow) and not na(oLow) and low[pivotR]<low[pivotR+pivotL+pivotR] and osc[pivotR]>osc[pivotR+pivotL+pivotR]
if bullDiv
    if not na(bullLine)
        line.delete(bullLine)
    bullLine:=line.new(int(bar_index-pivotR*2-pivotL),low[pivotR+pivotL+pivotR], int(bar_index-pivotR),low[pivotR],extend=extend.right,color=color.green,style=line.style_dotted,width=2)
    label.new(int(bar_index-pivotR),low[pivotR],"Bull Div ðŸŸ¢",style=label.style_label_up,color=color.green,textcolor=color.white)

bearDiv=not na(pHigh) and not na(oHigh) and high[pivotR]>high[pivotR+pivotL+pivotR] and osc[pivotR]<osc[pivotR+pivotL+pivotR]
if bearDiv
    if not na(bearLine)
        line.delete(bearLine)
    bearLine:=line.new(int(bar_index-pivotR*2-pivotL),high[pivotR+pivotL+pivotR], int(bar_index-pivotR),high[pivotR],extend=extend.right,color=color.red,style=line.style_dotted,width=2)
    label.new(int(bar_index-pivotR),high[pivotR],"Bear Div ðŸ”´",style=label.style_label_down,color=color.red,textcolor=color.white)

// Get dynamic line prices
bullLineY=na(bullLine)?na:line.get_price(bullLine, bar_index)
bearLineY=na(bearLine)?na:line.get_price(bearLine, bar_index)

// Entry signals = trigger only once
bullCond = not na(bullLineY) and close>bullLineY
bearCond = not na(bearLineY) and close<bearLineY
bullEntry = ta.change(bullCond) and bullCond
bearEntry = ta.change(bearCond) and bearCond

// Store active stop line, to prevent repeating
var line stopLine = na
var label stopLabel = na

if bullEntry
    // Entry
    label.new(bar_index,close,"ðŸŸ¢ BUY ENTRY",style=label.style_label_up,color=color.green,textcolor=color.white,size=size.large)
    // Stop once, clear previous
    if not na(stopLine)
        line.delete(stopLine)
        label.delete(stopLabel)
    stopLvl=low[pivotR]*(1-stopPct/100)
    stopLine:=line.new(bar_index,stopLvl,bar_index+20,stopLvl,extend=extend.right,style=line.style_dashed,color=color.red,width=2)
    stopLabel:=label.new(bar_index,stopLvl,"â›” STOP LOSS",style=label.style_label_down,color=color.red,textcolor=color.white)
    alert("ðŸŸ¢ BUY " + str.tostring(close,format.mintick)+" | Stop: "+str.tostring(stopLvl,format.mintick),alert.freq_once_per_bar_close)

if bearEntry
    // Entry
    label.new(bar_index,close,"ðŸ”´ SHORT ENTRY",style=label.style_label_down,color=color.red,textcolor=color.white,size=size.large)
    // Stop once, clear previous
    if not na(stopLine)
        line.delete(stopLine)
        label.delete(stopLabel)
    stopLvl=high[pivotR]*(1+stopPct/100)
    stopLine:=line.new(bar_index,stopLvl,bar_index+20,stopLvl,extend=extend.right,style=line.style_dashed,color=color.green,width=2)
    stopLabel:=label.new(bar_index,stopLvl,"â›” STOP LOSS",style=label.style_label_up,color=color.green,textcolor=color.white)
    alert("ðŸ”´ SHORT " + str.tostring(close,format.mintick)+" | Stop: "+str.tostring(stopLvl,format.mintick),alert.freq_once_per_bar_close)

// Static alertconditions for client distribution
alertcondition(bullEntry,"Bullish Breakout + Divergence","ðŸŸ¢ BUY signal triggered (breakout + bullish divergence)")
alertcondition(bearEntry,"Bearish Breakdown + Divergence","ðŸ”´ SHORT signal triggered (breakdown + bearish divergence)")
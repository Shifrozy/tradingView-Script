//@version=6
indicator("MACD Divergence Breakout", shorttitle="MACDDiverg", overlay=true)

// === INPUTS ===
leftBars = input.int(5, "Left Bars for Pivot", minval=1)
rightBars = input.int(5, "Right Bars for Pivot", minval=1)
fastLength = input.int(12, "MACD Fast")
slowLength = input.int(26, "MACD Slow") 
sigLength = input.int(9, "MACD Signal")
riskRewardRatio = input.float(1.5, "Risk Reward Ratio", minval=1.0, step=0.1)
bullishColor = input.color(color.green, "Bullish Color")
bearishColor = input.color(color.red, "Bearish Color")

// === MACD CALCULATION ===
[macdLine, signalLine, histogram] = ta.macd(close, fastLength, slowLength, sigLength)

// === PIVOT DETECTION ===
priceHighPivot = ta.pivothigh(high, leftBars, rightBars)
priceLowPivot = ta.pivotlow(low, leftBars, rightBars)
macdHighPivot = ta.pivothigh(histogram, leftBars, rightBars)
macdLowPivot = ta.pivotlow(histogram, leftBars, rightBars)

// === STORAGE VARIABLES ===
var line priceBullishLine = na
var line priceBearishLine = na
var line macdBullishLine = na
var line macdBearishLine = na
var label buyLabel = na
var label sellLabel = na
var line stopLine = na
var label stopLabel = na
var line targetLine = na
var label targetLabel = na

var float lastBullishPrice = na
var int lastBullishPriceBar = na
var float lastBullishMacd = na
var int lastBullishMacdBar = na
var float lastBearishPrice = na
var int lastBearishPriceBar = na
var float lastBearishMacd = na
var int lastBearishMacdBar = na

// === DIVERGENCE DETECTION ===
// Bullish Divergence (Price: Lower Low, MACD: Higher Low)
if not na(priceLowPivot) and not na(macdLowPivot)
    currentPriceLow = low[rightBars]
    currentMacdLow = histogram[rightBars]
    currentBar = bar_index - rightBars
    
    if not na(lastBullishPrice) and not na(lastBullishMacd)
        if currentPriceLow < lastBullishPrice and currentMacdLow > lastBullishMacd
            if not na(priceBullishLine)
                line.delete(priceBullishLine)
            priceBullishLine := line.new(x1=lastBullishPriceBar, y1=lastBullishPrice, x2=currentBar, y2=currentPriceLow, color=bullishColor, style=line.style_dotted, width=2)
            
            if not na(macdBullishLine)
                line.delete(macdBullishLine)
            macdBullishLine := line.new(x1=lastBullishMacdBar, y1=lastBullishMacd, x2=currentBar, y2=currentMacdLow, color=bullishColor, style=line.style_dotted, width=1)
    
    lastBullishPrice := currentPriceLow
    lastBullishPriceBar := currentBar
    lastBullishMacd := currentMacdLow
    lastBullishMacdBar := currentBar

// Bearish Divergence (Price: Higher High, MACD: Lower High)
if not na(priceHighPivot) and not na(macdHighPivot)
    currentPriceHigh = high[rightBars]
    currentMacdHigh = histogram[rightBars]
    currentBar = bar_index - rightBars
    
    if not na(lastBearishPrice) and not na(lastBearishMacd)
        if currentPriceHigh > lastBearishPrice and currentMacdHigh < lastBearishMacd
            if not na(priceBearishLine)
                line.delete(priceBearishLine)
            priceBearishLine := line.new(x1=lastBearishPriceBar, y1=lastBearishPrice, x2=currentBar, y2=currentPriceHigh, color=bearishColor, style=line.style_dotted, width=2)
            
            if not na(macdBearishLine)
                line.delete(macdBearishLine)
            macdBearishLine := line.new(x1=lastBearishMacdBar, y1=lastBearishMacd, x2=currentBar, y2=currentMacdHigh, color=bearishColor, style=line.style_dotted, width=1)
    
    lastBearishPrice := currentPriceHigh
    lastBearishPriceBar := currentBar
    lastBearishMacd := currentMacdHigh
    lastBearishMacdBar := currentBar

// === BREAKOUT SIGNALS ===
bullishBreakout = false
bearishBreakout = false

if not na(priceBullishLine)
    trendlinePrice = line.get_price(priceBullishLine, bar_index)
    bullishBreakout := not na(trendlinePrice) and close > trendlinePrice

if not na(priceBearishLine)
    trendlinePrice = line.get_price(priceBearishLine, bar_index)
    bearishBreakout := not na(trendlinePrice) and close < trendlinePrice

// === TRADE MANAGEMENT ===
if bullishBreakout
    if not na(buyLabel)
        label.delete(buyLabel)
    if not na(stopLabel)
        label.delete(stopLabel)
    if not na(targetLabel)
        label.delete(targetLabel)
    if not na(stopLine)
        line.delete(stopLine)
    if not na(targetLine)
        line.delete(targetLine)
    
    stopPrice = math.min(low, low[1])
    entryPrice = close
    risk = entryPrice - stopPrice
    targetPrice = entryPrice + (risk * riskRewardRatio)
    
    buyLabel := label.new(bar_index, low, text="ðŸŸ¢ BUY\nEntry: " + str.tostring(entryPrice, "#.##") + "\nStop: " + str.tostring(stopPrice, "#.##") + "\nTarget: " + str.tostring(targetPrice, "#.##"), color=color.green, textcolor=color.white, style=label.style_label_up, size=size.normal)
    
    stopLine := line.new(bar_index, stopPrice, bar_index + 50, stopPrice, color=color.red, style=line.style_dashed, width=2)
    stopLabel := label.new(bar_index + 25, stopPrice, text="â›” STOP", color=color.red, textcolor=color.white, style=label.style_label_right)
    
    targetLine := line.new(bar_index, targetPrice, bar_index + 50, targetPrice, color=color.blue, style=line.style_dashed, width=2)
    targetLabel := label.new(bar_index + 25, targetPrice, text="ðŸŽ¯ TARGET", color=color.blue, textcolor=color.white, style=label.style_label_right)
    
    line.delete(priceBullishLine)
    line.delete(macdBullishLine)
    priceBullishLine := na
    macdBullishLine := na

if bearishBreakout
    if not na(sellLabel)
        label.delete(sellLabel)
    if not na(stopLabel)
        label.delete(stopLabel)
    if not na(targetLabel)
        label.delete(targetLabel)
    if not na(stopLine)
        line.delete(stopLine)
    if not na(targetLine)
        line.delete(targetLine)
    
    stopPrice = math.max(high, high[1])
    entryPrice = close
    risk = stopPrice - entryPrice
    targetPrice = entryPrice - (risk * riskRewardRatio)
    
    sellLabel := label.new(bar_index, high, text="ðŸ”´ SELL\nEntry: " + str.tostring(entryPrice, "#.##") + "\nStop: " + str.tostring(stopPrice, "#.##") + "\nTarget: " + str.tostring(targetPrice, "#.##"), color=color.red, textcolor=color.white, style=label.style_label_down, size=size.normal)
    
    stopLine := line.new(bar_index, stopPrice, bar_index + 50, stopPrice, color=color.red, style=line.style_dashed, width=2)
    stopLabel := label.new(bar_index + 25, stopPrice, text="â›” STOP", color=color.red, textcolor=color.white, style=label.style_label_left)
    
    targetLine := line.new(bar_index, targetPrice, bar_index + 50, targetPrice, color=color.blue, style=line.style_dashed, width=2)
    targetLabel := label.new(bar_index + 25, targetPrice, text="ðŸŽ¯ TARGET", color=color.blue, textcolor=color.white, style=label.style_label_left)
    
    line.delete(priceBearishLine)
    line.delete(macdBearishLine)
    priceBearishLine := na
    macdBearishLine := na

// === MACD DISPLAY ===
plot(histogram, "MACD Histogram", color=histogram >= 0 ? color.green : color.red, style=plot.style_columns, display=display.pane)
plot(macdLine, "MACD Line", color=color.blue, display=display.pane)
plot(signalLine, "Signal Line", color=color.orange, display=display.pane)
hline(0, "Zero Line", color=color.gray)

// === ALERTS ===
alertcondition(bullishBreakout, title="Bullish Breakout")
alertcondition(bearishBreakout, title="Bearish Breakout")

if bullishBreakout
    alert("BUY Signal - " + syminfo.ticker, alert.freq_once_per_bar)

if bearishBreakout
    alert("SELL Signal - " + syminfo.ticker, alert.freq_once_per_bar)
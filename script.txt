//@version=6
indicator("Professional Trendline Breakout Indicator", overlay=true, max_lines_count=500, max_labels_count=500)

// ==================== USER INPUTS ====================
// Pivot Detection Settings
pivotLength = input.int(5, "Pivot Length", minval=3, group="Trendline Settings", 
     tooltip="Number of bars to identify swing highs/lows")

// Trade Management Settings
profitTargetPercent = input.float(10.0, "Profit Target %", minval=0.1, step=0.1, group="Trade Management",
     tooltip="Percentage above/below entry for take profit")
stopLookback = input.int(5, "Stop Loss Lookback", minval=1, group="Trade Management",
     tooltip="Number of bars to look back for stop loss calculation")

// Visual Settings
showTrendlines = input.bool(true, "Show Trendlines", group="Visual Settings")
showEntrySignals = input.bool(true, "Show Entry Signals", group="Visual Settings")
showSLTP = input.bool(true, "Show Stop Loss & Take Profit", group="Visual Settings")
showBackground = input.bool(true, "Highlight Breakout Bars", group="Visual Settings")
showLabels = input.bool(true, "Show Price Labels", group="Visual Settings")

// Colors
resistanceColor = input.color(color.orange, "Resistance Line Color", group="Colors")
supportColor = input.color(color.blue, "Support Line Color", group="Colors")
buyColor = input.color(color.green, "Buy Signal Color", group="Colors")
sellColor = input.color(color.red, "Sell Signal Color", group="Colors")

// ==================== PIVOT DETECTION ====================
// Function to detect pivot highs
pivotHigh = ta.pivothigh(high, pivotLength, pivotLength)
pivotLow = ta.pivotlow(low, pivotLength, pivotLength)

// Arrays to store pivot points
var array<float> resistancePivots = array.new<float>()
var array<int> resistanceBars = array.new<int>()
var array<float> supportPivots = array.new<float>()
var array<int> supportBars = array.new<int>()

// Store new pivots
if not na(pivotHigh)
    array.push(resistancePivots, pivotHigh)
    array.push(resistanceBars, bar_index - pivotLength)
    // Keep only last 50 pivots for performance
    if array.size(resistancePivots) > 50
        array.shift(resistancePivots)
        array.shift(resistanceBars)

if not na(pivotLow)
    array.push(supportPivots, pivotLow)
    array.push(supportBars, bar_index - pivotLength)
    // Keep only last 50 pivots for performance
    if array.size(supportPivots) > 50
        array.shift(supportPivots)
        array.shift(supportBars)

// ==================== TRENDLINE CALCULATION ====================
// Function to calculate trendline slope and intercept
calculateTrendline(pivots, bars) =>
    size = array.size(pivots)
    if size < 2
        [0.0, 0.0]
    else
        // Get last two pivots for simple trendline
        y2 = array.get(pivots, size - 1)
        y1 = array.get(pivots, size - 2)
        x2 = array.get(bars, size - 1)
        x1 = array.get(bars, size - 2)
        
        slope = (y2 - y1) / (x2 - x1)
        intercept = y1 - slope * x1
        [slope, intercept]

// Calculate current trendline values
[resistanceSlope, resistanceIntercept] = calculateTrendline(resistancePivots, resistanceBars)
[supportSlope, supportIntercept] = calculateTrendline(supportPivots, supportBars)

// Current trendline values at current bar
resistanceValue = resistanceIntercept + resistanceSlope * bar_index
supportValue = supportIntercept + supportSlope * bar_index

// ==================== BREAKOUT DETECTION ====================
// Breakout conditions
resistanceBreakout = close > resistanceValue and close[1] <= resistanceValue[1] and array.size(resistancePivots) >= 2
supportBreakout = close < supportValue and close[1] >= supportValue[1] and array.size(supportPivots) >= 2

// ==================== TRADE MANAGEMENT ====================
// Calculate stop loss levels
buyStopLoss = ta.lowest(low, stopLookback)
sellStopLoss = ta.highest(high, stopLookback)

// Calculate take profit levels
buyTakeProfit = close * (1 + profitTargetPercent / 100)
sellTakeProfit = close * (1 - profitTargetPercent / 100)

// ==================== VISUAL ELEMENTS ====================
// Draw trendlines
var line resistanceLine = na
var line supportLine = na

if showTrendlines and array.size(resistancePivots) >= 2
    if not na(resistanceLine)
        line.delete(resistanceLine)
    x1 = array.get(resistanceBars, array.size(resistanceBars) - 2)
    y1 = array.get(resistancePivots, array.size(resistancePivots) - 2)
    resistanceLine := line.new(x1, y1, bar_index + 50, resistanceValue + resistanceSlope * 50, 
         color=resistanceColor, width=2, extend=extend.right)

if showTrendlines and array.size(supportPivots) >= 2
    if not na(supportLine)
        line.delete(supportLine)
    x1 = array.get(supportBars, array.size(supportBars) - 2)
    y1 = array.get(supportPivots, array.size(supportPivots) - 2)
    supportLine := line.new(x1, y1, bar_index + 50, supportValue + supportSlope * 50, 
         color=supportColor, width=2, extend=extend.right)

// Entry signals
if showEntrySignals
    if resistanceBreakout
        label.new(bar_index, low, "▲", color=buyColor, style=label.style_label_up, 
             size=size.normal, textcolor=buyColor)
    if supportBreakout
        label.new(bar_index, high, "▼", color=sellColor, style=label.style_label_down, 
             size=size.normal, textcolor=sellColor)

// Stop loss and take profit lines
if showSLTP
    if resistanceBreakout
        line.new(bar_index, buyStopLoss, bar_index + 20, buyStopLoss, 
             color=color.red, style=line.style_dashed, width=1)
        line.new(bar_index, buyTakeProfit, bar_index + 20, buyTakeProfit, 
             color=color.green, style=line.style_dashed, width=1)
        
        if showLabels
            label.new(bar_index + 20, buyStopLoss, "SL: " + str.tostring(buyStopLoss, "#.##"), 
                 color=color.red, style=label.style_label_left, textcolor=color.white, size=size.small)
            label.new(bar_index + 20, buyTakeProfit, "TP: " + str.tostring(buyTakeProfit, "#.##"), 
                 color=color.green, style=label.style_label_left, textcolor=color.white, size=size.small)
    
    if supportBreakout
        line.new(bar_index, sellStopLoss, bar_index + 20, sellStopLoss, 
             color=color.red, style=line.style_dashed, width=1)
        line.new(bar_index, sellTakeProfit, bar_index + 20, sellTakeProfit, 
             color=color.green, style=line.style_dashed, width=1)
        
        if showLabels
            label.new(bar_index + 20, sellStopLoss, "SL: " + str.tostring(sellStopLoss, "#.##"), 
                 color=color.red, style=label.style_label_left, textcolor=color.white, size=size.small)
            label.new(bar_index + 20, sellTakeProfit, "TP: " + str.tostring(sellTakeProfit, "#.##"), 
                 color=color.green, style=label.style_label_left, textcolor=color.white, size=size.small)

// Background highlighting
bgcolor(showBackground and resistanceBreakout ? color.new(buyColor, 90) : na)
bgcolor(showBackground and supportBreakout ? color.new(sellColor, 90) : na)

// ==================== PLOTS FOR ALERTS ====================
// Plot values for use in alerts (invisible on chart)
plot(resistanceBreakout ? buyStopLoss : na, title="Buy Stop Loss", display=display.none)
plot(resistanceBreakout ? buyTakeProfit : na, title="Buy Take Profit", display=display.none)
plot(supportBreakout ? sellStopLoss : na, title="Sell Stop Loss", display=display.none)
plot(supportBreakout ? sellTakeProfit : na, title="Sell Take Profit", display=display.none)
plot(close, title="Entry Price", display=display.none)

// ==================== ALERTS ====================
// Alert conditions with constant strings
alertcondition(resistanceBreakout, 
     title="Resistance Breakout (BUY)", 
     message="RESISTANCE BREAKOUT! BUY signal triggered. Check chart for entry, stop loss, and take profit levels.")

alertcondition(supportBreakout, 
     title="Support Breakout (SELL)", 
     message="SUPPORT BREAKOUT! SELL signal triggered. Check chart for entry, stop loss, and take profit levels.")

alertcondition(resistanceBreakout or supportBreakout, 
     title="Any Breakout Signal", 
     message="BREAKOUT ALERT! New trade signal. Check chart for direction and trade levels.")

// For webhook integration with dynamic values
alertcondition(resistanceBreakout, 
     title="BUY Signal (Webhook)", 
     message='{"action": "BUY", "symbol": "{{ticker}}", "price": "{{close}}", "time": "{{time}}"}')

alertcondition(supportBreakout, 
     title="SELL Signal (Webhook)", 
     message='{"action": "SELL", "symbol": "{{ticker}}", "price": "{{close}}", "time": "{{time}}"}')